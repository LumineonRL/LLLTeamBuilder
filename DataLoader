from abc import ABC, abstractmethod
from typing import List
import json
from Card import Card


class JsonDataLoader(ABC):
    def __init__(self, file_path: str):
        self.file_path = file_path

    @abstractmethod
    def read_json(self) -> dict:
        pass

    @abstractmethod
    def write_json(self, data: dict):
        pass


class JsonCardDataLoader(JsonDataLoader):
    def read_json(self) -> List[Card]:
        with open(self.file_path, "r", encoding="utf-8") as file:
            card_list = json.load(file)

            return card_list

    def write_json(self, data: List[Card]):
        cards = [card.to_dict() for card in data]

        # Write the dictionary to a JSON file at self.filepath using built-in Python json module.
        with open(self.file_path, "w", encoding="utf-8") as file:
            json.dump(cards, file)
